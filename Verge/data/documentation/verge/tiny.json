{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Without the changing detection, the code is here."},{"type":"text","text":" "},{"type":"text","text":"There is no dependencies."}]},{"type":"codeListing","syntax":"swift","code":["class MyView: UIView {","  private struct State {","    var count: Int = 0","  }","  ","  private var state: State {","    didSet {","      update(with: state)","    }","  }","","  private func update(with state: State) {","    ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we focus on "},{"type":"codeVoice","code":"update(with:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"Try to simulate updating the label’s value."}]},{"type":"codeListing","syntax":"swift","code":["private func update(with state: State) {","  myLabel.text = \"\\(state.count)\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you can see, you will think you want to prevent updating the value until the value changed."}]},{"anchor":"Use-VergeTiny-module-to-prevent-the-duplicated-updating","level":2,"type":"heading","text":"Use Verge.Tiny module to prevent the duplicated updating."},{"type":"paragraph","inlineContent":[{"type":"text","text":"With installing "},{"type":"codeVoice","code":"Verge\/Tiny"},{"type":"text","text":" module, we can write up like followings."}]},{"type":"codeListing","syntax":"swift","code":["private func update(with state: State) {","  associatedProperties.doIfChanged(state.count) { count in ","    myLabel.text = \"\\(count)\"","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"associatedProperties"},{"type":"text","text":" is a storage of the values that associated with its owner object(NSObject)."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"doIfChanged"},{"type":"text","text":" gets the location of the code that would be a unique key by composition in the storage."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With this functions, we can get a filter anywhere in the object."},{"type":"text","text":" "},{"type":"text","text":"However, this function might affect code readabilities in Swift."},{"type":"text","text":" "},{"type":"text","text":"Please carefully using this."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We recommend you gather those operations into one place."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/verge\/tiny"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Verge\/documentation\/Verge\/Tiny","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"In fact, "},{"type":"codeVoice","code":"store-pattern"},{"type":"text","text":" doesn’t need something library to run."},{"type":"text","text":" "},{"type":"text","text":"The actually necessary thing is "},{"type":"strong","inlineContent":[{"type":"text","text":"the changing detection in UIKit."}]}],"kind":"article","metadata":{"roleHeading":"Article","title":"Yet another super tiny store pattern with Verge\/Tiny","role":"article","modules":[{"name":"Verge"}]},"hierarchy":{"paths":[["doc:\/\/Verge\/documentation\/Verge"]]},"references":{"doc://Verge/documentation/Verge":{"role":"collection","title":"Verge","abstract":[],"identifier":"doc:\/\/Verge\/documentation\/Verge","kind":"symbol","type":"topic","url":"\/documentation\/verge"}}}